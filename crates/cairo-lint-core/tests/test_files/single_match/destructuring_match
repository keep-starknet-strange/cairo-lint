//! > comprehensive match

//! > cairo_code
fn main() {
    let variable = Option::Some(1_felt252);
    match variable {
        Option::None => println!("None"),
        Option::Some => (),
    };
}

//! > diagnostics
warning: Plugin diagnostic: you seem to be trying to use `match` for an equality check. Consider using `if`
 --> lib.cairo:4:5
  |
4 |       match variable {
  |  _____-
5 | |         Option::None => println!("None"),
6 | |         Option::Some => (),
7 | |     };
  | |_____-
  |

//! > fixed
fn main() {
    let variable = Option::Some(1_felt252);
    match variable {
        Option::None => println!("None"),
        Option::Some => (),
    };
}

//! > ==========================================================================

//! > destructuring comprehensive match

//! > cairo_code
fn main() {
    let variable = Option::Some(1_felt252);
    match variable {
        Option::Some(a) => println!("{a}"),
        Option::None => (),
    };
}

//! > diagnostics
warning: Plugin diagnostic: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
 --> lib.cairo:4:5
  |
4 |       match variable {
  |  _____-
5 | |         Option::Some(a) => println!("{a}"),
6 | |         Option::None => (),
7 | |     };
  | |_____-
  |

//! > fixed
fn main() {
    let variable = Option::Some(1_felt252);
    if let Option::Some(a) = variable {
        println!("{a}")
    };
}

//! > ==========================================================================

//! > destructuring match second arm

//! > cairo_code
fn main() {
    // Both of the match are invalid hence the plugin doesn't output any diag
    let variable = Option::Some(Option::Some(1_felt252));
    match variable {
        _ => (),
        Option::Some(a) => match a {
            _ => (),
            Option::Some(b) => println!("{b}"),
        },
    };
}

//! > diagnostics

//! > fixed
fn main() {
    // Both of the match are invalid hence the plugin doesn't output any diag
    let variable = Option::Some(Option::Some(1_felt252));
    match variable {
        _ => (),
        Option::Some(a) => match a {
            _ => (),
            Option::Some(b) => println!("{b}"),
        },
    };
}

//! > ==========================================================================

//! > destructuring match twisted

//! > cairo_code
fn main() {
    let variable = Option::Some(Option::Some(1_felt252));
    match variable {
        // This match is invalid hence no diag/fix for this one
        Option::Some(a) => match a {
            _ => (),
            Option::Some(b) => println!("{b}"),
        },
        _ => (),
    };
}

//! > diagnostics
warning: Plugin diagnostic: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
  --> lib.cairo:4:5
   |
 4 |       match variable {
   |  _____-
 5 | |         // This match is invalid hence no diag/fix for this one
...  |
10 | |         _ => (),
11 | |     };
   | |_____-
   |

//! > fixed
fn main() {
    let variable = Option::Some(Option::Some(1_felt252));
    // This match is invalid hence no diag/fix for this one
    if let Option::Some(a) = variable {
        match a {
            _ => (),
            Option::Some(b) => println!("{b}"),
        }
    };
}

//! > ==========================================================================

//! > destructuring match twisted differently

//! > cairo_code
fn main() {
    let variable = Option::Some(Option::Some(1_felt252));
    // Invalid match so no diag/fix for this one
    match variable {
        _ => (),
        // This one is valid
        Option::Some(a) => match a {
            Option::Some(b) => println!("{b}"),
            _ => (),
        },
    };
}

//! > diagnostics
warning: Plugin diagnostic: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
  --> lib.cairo:12:28
   |
12 |           Option::Some(a) => match a {
   |  ____________________________-
13 | |             Option::Some(b) => println!("{b}"),
14 | |             _ => (),
15 | |         },
   | |_________-
   |

//! > fixed
fn main() {
    let variable = Option::Some(Option::Some(1_felt252));
    // Invalid match so no diag/fix for this one
    match variable {
        _ => (),
        // This one is valid
        Option::Some(a) => if let Option::Some(b) = a {
    println!("{b}")
},
    };
}

//! > ==========================================================================

//! > nested destructuring match

//! > cairo_code
fn main() {
    let variable = Option::Some(Option::Some(1_felt252));
    // Both valid
    match variable {
        Option::Some(a) => match a {
            Option::Some(b) => println!("{b}"),
            _ => (),
        },
        _ => (),
    };
}

//! > diagnostics
warning: Plugin diagnostic: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
  --> lib.cairo:8:28
   |
 8 |           Option::Some(a) => match a {
   |  ____________________________-
 9 | |             Option::Some(b) => println!("{b}"),
10 | |             _ => (),
11 | |         },
   | |_________-
   |
warning: Plugin diagnostic: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
  --> lib.cairo:6:5
   |
 6 |       match variable {
   |  _____-
 7 | |         Option::Some(a) => match a {
...  |
11 | |         _ => (),
12 | |     };
   | |_____-
   |

//! > fixed
Contains nested diagnostics can't fix it

//! > ==========================================================================

//! > reversed destructuring comprehensive match

//! > cairo_code
fn main() {
    let variable = Option::Some(1_felt252);
    match variable {
        Option::None => (),
        Option::Some(a) => println!("{a}"),
    };
}

//! > diagnostics

//! > fixed
fn main() {
    let variable = Option::Some(1_felt252);
    match variable {
        Option::None => (),
        Option::Some(a) => println!("{a}"),
    };
}

//! > ==========================================================================

//! > simple destructuring match

//! > cairo_code
fn main() {
    let variable = Option::Some(1_felt252);
    match variable {
        Option::Some(a) => println!("{a}"),
        _ => (),
    };
}

//! > diagnostics
warning: Plugin diagnostic: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
 --> lib.cairo:4:5
  |
4 |       match variable {
  |  _____-
5 | |         Option::Some(a) => println!("{a}"),
6 | |         _ => (),
7 | |     };
  | |_____-
  |

//! > fixed
fn main() {
    let variable = Option::Some(1_felt252);
    if let Option::Some(a) = variable {
        println!("{a}")
    };
}

//! > ==========================================================================

//! > simple destructuring match second arm

//! > cairo_code
fn main() {
    let variable = Option::Some(1_felt252);
    // Invalid match
    match variable {
        _ => (),
        Option::Some(a) => println!("{a}"),
    };
}

//! > diagnostics

//! > fixed
fn main() {
    let variable = Option::Some(1_felt252);
    // Invalid match
    match variable {
        _ => (),
        Option::Some(a) => println!("{a}"),
    };
}

//! > ==========================================================================

//! > simple destructuring match with comment in scope

//! > cairo_code
fn main() {
    let variable = Option::Some(1_felt252);
    match variable {
        Option::Some(a) => println!("{a}"),
        _ => { 
            // This is a comment
        },
    };
}

//! > diagnostics

//! > fixed
fn main() {
    let variable = Option::Some(1_felt252);
    match variable {
        Option::Some(a) => println!("{a}"),
        _ => { 
            // This is a comment
        },
    };
}

//! > ==========================================================================

//! > simple destructuring match with scope

//! > cairo_code
fn main() {
    let variable = Option::Some(1_felt252);
    match variable {
        Option::Some(a) => println!("{a}"),
        _ => {},
    };
}

//! > diagnostics
warning: Plugin diagnostic: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
 --> lib.cairo:4:5
  |
4 |       match variable {
  |  _____-
5 | |         Option::Some(a) => println!("{a}"),
6 | |         _ => {},
7 | |     };
  | |_____-
  |

//! > fixed
fn main() {
    let variable = Option::Some(1_felt252);
    if let Option::Some(a) = variable {
        println!("{a}")
    };
}

//! > ==========================================================================

//! > simple destructuring match with unit and comment in scope

//! > cairo_code
fn main() {
    let variable = Option::Some(1_felt252);
    match variable {
        Option::Some(a) => println!("{a}"),
        _ => { 
            // This is a comment
            () 
        },
    };
}

//! > diagnostics

//! > fixed
fn main() {
    let variable = Option::Some(1_felt252);
    match variable {
        Option::Some(a) => println!("{a}"),
        _ => { 
            // This is a comment
            () 
        },
    };
}

//! > ==========================================================================

//! > simple destructuring match with unit in scope

//! > cairo_code
fn main() {
    let variable = Option::Some(1_felt252);
    match variable {
        Option::Some(a) => println!("{a}"),
        _ => { () },
    };
}

//! > diagnostics
warning: Plugin diagnostic: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
 --> lib.cairo:4:5
  |
4 |       match variable {
  |  _____-
5 | |         Option::Some(a) => println!("{a}"),
6 | |         _ => { () },
7 | |     };
  | |_____-
  |

//! > fixed
fn main() {
    let variable = Option::Some(1_felt252);
    if let Option::Some(a) = variable {
        println!("{a}")
    };
}
