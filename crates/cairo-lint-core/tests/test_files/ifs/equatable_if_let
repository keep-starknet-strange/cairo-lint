//! > Complex Equality Destructuring

//! > cairo_code
fn main() {
    let x = Option::Some(1_felt252);
    if let Option::Some(val) = x {
        println!("{val}");
    }
}

//! > diagnostics

//! > fixed
fn main() {
    let x = Option::Some(1_felt252);
    if let Option::Some(val) = x {
        println!("{val}");
    }
}

//! > ==========================================================================

//! > Enum Unit Variant Pattern Matching

//! > cairo_code
enum Enum {
    UnitVariant
} 

fn main() {
    let e = Enum::UnitVariant;

    if let Enum::UnitVariant = e {}
}

//! > diagnostics
warning: Plugin diagnostic: `if let` pattern used for equatable value. Consider using a simple comparison `==` instead
  --> lib.cairo:14:5
   |
14 |     if let Enum::UnitVariant = e {}
   |     -------------------------------
   |

//! > fixed
enum Enum {
    UnitVariant
} 

fn main() {
    let e = Enum::UnitVariant;

    if e == Enum::UnitVariant {}
}

//! > ==========================================================================

//! > Matching With Simple Structs field

//! > cairo_code
fn main() {
    let x = Option::Some(2);
    if let Option::Some(2) = x {
        do_thing();
    }
}

//! > diagnostics
warning: Plugin diagnostic: `if let` pattern used for equatable value. Consider using a simple comparison `==` instead
 --> lib.cairo:4:5
  |
4 |       if let Option::Some(2) = x {
  |  _____-
5 | |         do_thing();
6 | |     }
  | |_____-
  |
error: Function not found.
 --> lib.cairo:6:9
  |
6 |         do_thing();
  |         ^^^^^^^^
  |

//! > fixed
fn main() {
    let x = Option::Some(2);
    if x == Option::Some(2) {
        do_thing();
    }
}

//! > ==========================================================================

//! > Simple Value Pattern Matching

//! > cairo_code
fn main() {
    let a = 2;
    if let 2 = a {}
}

//! > diagnostics
warning: Plugin diagnostic: `if let` pattern used for equatable value. Consider using a simple comparison `==` instead
 --> lib.cairo:4:5
  |
4 |     if let 2 = a {}
  |     ---------------
  |

//! > fixed
fn main() {
    let a = 2;
    if a == 2 {}
}

//! > ==========================================================================

//! > complex equality destructuring if let

//! > cairo_code
fn main() {
    let x = Option::Some(1_felt252);
    let y = Option::Some(1_felt252);
    if let (Option::Some(a), Option::Some(b)) = (x, y) {
        if a == b {
            println!("{a}");
        }
    }
}

//! > diagnostics

//! > fixed
fn main() {
    let x = Option::Some(1_felt252);
    let y = Option::Some(1_felt252);
    if let (Option::Some(a), Option::Some(b)) = (x, y) {
        if a == b {
            println!("{a}");
        }
    }
}

//! > ==========================================================================

//! > simple equality cases ok

//! > cairo_code
fn main() {
    let x = Option::Some(1_felt252);
    if x == Option::Some(1_felt252) {
        println!("Value");
    }
}

//! > diagnostics

//! > fixed
fn main() {
    let x = Option::Some(1_felt252);
    if x == Option::Some(1_felt252) {
        println!("Value");
    }
}
