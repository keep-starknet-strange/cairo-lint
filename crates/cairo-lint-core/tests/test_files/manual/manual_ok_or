//! > test error str

//! > cairo_code
fn main() {
    let foo: Option<i32> = Option::None;
    let _foo = match foo {
        Option::Some(v) => Result::Ok(v),
        Option::None => Result::Err('this is an err'),
    };
}

//! > diagnostics

warning: Plugin diagnostic: Manual match for Option<T> detected. Consider using ok_or instead
 --> lib.cairo:4:16
  |
4 |       let _foo = match foo {
  |  ________________-
5 | |         Option::Some(v) => Result::Ok(v),
6 | |         Option::None => Result::Err('this is an err'),
7 | |     };
  | |_____-
  |

//! > fixed
fn main() {
    let foo: Option<i32> = Option::None;
    let _foo = foo.ok_or('this is an err');
}

//! > ==========================================================================

//! > test error enum

//! > cairo_code
mod Error {
    pub const Error: felt252 = 'this is an err';
}
fn main() {
    let foo: Option<i32> = Option::None;
    let _foo = match foo {
        Option::Some(v) => Result::Ok(v),
        Option::None => Result::Err(Error::Error),
    };
}

//! > diagnostics

warning: Plugin diagnostic: Manual match for Option<T> detected. Consider using ok_or instead
  --> lib.cairo:10:16
   |
10 |       let _foo = match foo {
   |  ________________-
11 | |         Option::Some(v) => Result::Ok(v),
12 | |         Option::None => Result::Err(Error::Error),
13 | |     };
   | |_____-
   |

//! > fixed
mod Error {
    pub const Error: felt252 = 'this is an err';
}
fn main() {
    let foo: Option<i32> = Option::None;
    let _foo = foo.ok_or(Error::Error);
}


//! > ==========================================================================

//! > test with comment in None

//! > cairo_code
fn main() {
    let foo: Option<i32> = Option::None;
    let _foo = match foo {
        Option::Some(v) => Result::Ok(v),
        Option::None =>{
            // do something
            Result::Err('this is an err')
        },
    };
}

//! > diagnostics

//! > fixed
fn main() {
    let foo: Option<i32> = Option::None;
    let _foo = match foo {
        Option::Some(v) => Result::Ok(v),
        Option::None =>{
            // do something
            Result::Err('this is an err')
        },
    };
}

//! > ==========================================================================

//! > test with comment in Some

//! > cairo_code
fn main() {
    let foo: Option<i32> = Option::None;
    let _foo = match foo {
        Option::Some(v) => {
            // do something
            Result::Ok(v)
        },
        Option::None => Result::Err('this is an err'),
    };
}

//! > diagnostics

//! > fixed
fn main() {
    let foo: Option<i32> = Option::None;
    let _foo = match foo {
        Option::Some(v) => {
            // do something
            Result::Ok(v)
        },
        Option::None => Result::Err('this is an err'),
    };
}