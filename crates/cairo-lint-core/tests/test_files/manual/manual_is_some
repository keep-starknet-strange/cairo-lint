//! > test basic is some

//! > cairo_code
fn main() {
    let foo: Option::<i32> = Option::None;
    let _foo = match foo {
        Option::Some(_) => true,
        Option::None => false,
    };
}

//! > diagnostics

warning: Plugin diagnostic: Manual match for `is_some` detected. Consider using `is_some()` instead
 --> lib.cairo:4:16
  |
4 |       let _foo = match foo {
  |  ________________-
5 | |         Option::Some(_) => true,
6 | |         Option::None => false,
7 | |     };
  | |_____-
  |

//! > fixed
fn main() {
    let foo: Option::<i32> = Option::None;
    let _foo = foo.is_some();
}
//! > ==========================================================================
//! > test basic is some allowed

//! > cairo_code
fn main() {
    let foo: Option::<i32> = Option::None;
    #[allow(manual_is_some)]
    let _foo = match foo {
        Option::Some(_) => true,
        Option::None => false,
    };
}

//! > diagnostics

//! > fixed
fn main() {
    let foo: Option::<i32> = Option::None;
    #[allow(manual_is_some)]
    let _foo = match foo {
        Option::Some(_) => true,
        Option::None => false,
    };
}

//! > ==========================================================================

//! > test with comment in Some

//! > cairo_code
fn main() {
  let foo: Option::<i32> = Option::None;
  let _foo = match foo {
      Option::Some(_) => {
          // do something
          true
      },
      Option::None => false,
  };
}

//! > diagnostics

//! > fixed
fn main() {
  let foo: Option::<i32> = Option::None;
  let _foo = match foo {
      Option::Some(_) => {
          // do something
          true
      },
      Option::None => false,
  };
}

//! > ==========================================================================

//! > test with comment in None

//! > cairo_code
fn main() {
  let foo: Option::<i32> = Option::None;
  let _foo = match foo {
      Option::Some(_) => true,
      Option::None => {
          // do something
          false
      },
  };
}

//! > diagnostics

//! > fixed
fn main() {
  let foo: Option::<i32> = Option::None;
  let _foo = match foo {
      Option::Some(_) => true,
      Option::None => {
          // do something
          false
      },
  };
}

//! > ==========================================================================

//! > test match expression is a function

//! > cairo_code
fn foo(a: u256) -> Option<u256> {
  Option::Some(a)
}
fn main() {
  let a: u256 = 0;
  let _a = match foo(a) {
      Option::Some(_) => true,
      Option::None => false
  };
}


//! > diagnostics

warning: Plugin diagnostic: Manual match for `is_some` detected. Consider using `is_some()` instead
  --> lib.cairo:10:12
   |
10 |     let _a = match foo(a) {
   |  ____________-
11 | |       Option::Some(_) => true,
12 | |       Option::None => false
13 | |   };
   | |___-
   |

//! > fixed
fn foo(a: u256) -> Option<u256> {
  Option::Some(a)
}
fn main() {
  let a: u256 = 0;
  let _a = foo(a).is_some();
}


//! > ==========================================================================

//! > test manual if

//! > cairo_code
fn main() {
  let opt_val: Option<i32> = Option::None;
  let _a = if let Option::Some(_) = opt_val {
      true
  } else {
      false
  };
}


//! > diagnostics
warning: Plugin diagnostic: Manual match for `is_some` detected. Consider using `is_some()` instead
 --> lib.cairo:4:12
  |
4 |     let _a = if let Option::Some(_) = opt_val {
  |  ____________-
5 | |       true
6 | |   } else {
7 | |       false
8 | |   };
  | |___-
  |

//! > fixed
fn main() {
  let opt_val: Option<i32> = Option::None;
  let _a = opt_val.is_some();
}

//! > ==========================================================================

//! > test manual if with additional instructions

//! > cairo_code
fn main() {
  let opt_val: Option<i32> = Option::None;
  let mut val = 1;
  let _a = if let Option::Some(_) = opt_val {
      val += 1;
      false
  } else {
      true
  };
}

//! > diagnostics

//! > fixed
fn main() {
  let opt_val: Option<i32> = Option::None;
  let mut val = 1;
  let _a = if let Option::Some(_) = opt_val {
      val += 1;
      false
  } else {
      true
  };
}

