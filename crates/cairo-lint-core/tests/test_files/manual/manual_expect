//! > test core::panic_with_felt252

//! > cairo_code
fn main() {
    let foo: Option::<i32> = Option::None;
    let _foo = match foo {
        Option::Some(x) => x,
        Option::None => core::panic_with_felt252('err'),
    };
}

//! > diagnostics
warning: Plugin diagnostic: Manual match for expect detected. Consider using `expect()` instead
 --> lib.cairo:3:16
  |
3 |       let _foo = match foo {
  |  ________________-
4 | |         Option::Some(x) => x,
5 | |         Option::None => core::panic_with_felt252('err'),
6 | |     };
  | |_____-
  |

//! > fixed
fn main() {
    let foo: Option::<i32> = Option::None;
    let _foo = foo.expect('err');
}

//! > ==========================================================================

//! > test manual if

//! > cairo_code
fn main() {
    let opt_val: Option<i32> = Option::None;
    let _a = if let Option::Some(val) = opt_val {
        val
    } else {
        core::panic_with_felt252('panic')
    };
}

//! > diagnostics
warning: Plugin diagnostic: Manual match for expect detected. Consider using `expect()` instead
 --> lib.cairo:3:14
  |
3 |       let _a = if let Option::Some(val) = opt_val {
  |  ______________-
4 | |         val
5 | |     } else {
6 | |         core::panic_with_felt252('panic')
7 | |     };
  | |_____-
  |

//! > fixed
fn main() {
    let opt_val: Option<i32> = Option::None;
    let _a = opt_val.expect('panic');
}

//! > ==========================================================================

//! > test manual if with additional instructions

//! > cairo_code
fn main() {
    let opt_val: Option<i32> = Option::None;
    let _a = if let Option::Some(val) = opt_val {
        let val = val + 1;
        val
    } else {
        core::panic_with_felt252('panic')
    };
}

//! > diagnostics

//! > fixed
fn main() {
    let opt_val: Option<i32> = Option::None;
    let _a = if let Option::Some(val) = opt_val {
        let val = val + 1;
        val
    } else {
        core::panic_with_felt252('panic')
    };
}

//! > ==========================================================================

//! > test match expression is a function

//! > cairo_code
fn foo(a: u256) -> Option<u256> {
    Option::Some(a)
} 
fn main() {
    let a: u256 = 0; 
    let _a = match foo(a) {
        Option::Some(value) => value,
        Option::None => core::panic_with_felt252('err')
    };
}

//! > diagnostics
warning: Plugin diagnostic: Manual match for expect detected. Consider using `expect()` instead
 --> lib.cairo:6:14
  |
6 |       let _a = match foo(a) {
  |  ______________-
7 | |         Option::Some(value) => value,
8 | |         Option::None => core::panic_with_felt252('err')
9 | |     };
  | |_____-
  |

//! > fixed
fn foo(a: u256) -> Option<u256> {
    Option::Some(a)
} 
fn main() {
    let a: u256 = 0; 
    let _a = foo(a).expect('err');
}

//! > ==========================================================================

//! > test panic_with_felt252

//! > cairo_code
use core::panic_with_felt252;
fn main() {
    let foo: Option::<i32> = Option::None;
    let _foo = match foo {
        Option::Some(x) => x,
        Option::None => panic_with_felt252('err'),
    };
}

//! > diagnostics
warning: Plugin diagnostic: Manual match for expect detected. Consider using `expect()` instead
 --> lib.cairo:4:16
  |
4 |       let _foo = match foo {
  |  ________________-
5 | |         Option::Some(x) => x,
6 | |         Option::None => panic_with_felt252('err'),
7 | |     };
  | |_____-
  |

//! > fixed
use core::panic_with_felt252;
fn main() {
    let foo: Option::<i32> = Option::None;
    let _foo = foo.expect('err');
}

//! > ==========================================================================

//! > test with comment in None

//! > cairo_code
fn main() {
    let foo: Option::<i32> = Option::None;
    let _foo = match foo {
        Option::Some(x) => x,
        Option::None => 
        {
            // do something
            core::panic_with_felt252('err')
        },
    };
}

//! > diagnostics

//! > fixed
fn main() {
    let foo: Option::<i32> = Option::None;
    let _foo = match foo {
        Option::Some(x) => x,
        Option::None => 
        {
            // do something
            core::panic_with_felt252('err')
        },
    };
}

//! > ==========================================================================

//! > test with comment in Some

//! > cairo_code
fn main() {
    let foo: Option::<i32> = Option::None;
    let _foo = match foo {
        Option::Some(x) => {
            // do something
            x
        },
        Option::None => core::panic_with_felt252('err'),
    };
}

//! > diagnostics

//! > fixed
fn main() {
    let foo: Option::<i32> = Option::None;
    let _foo = match foo {
        Option::Some(x) => {
            // do something
            x
        },
        Option::None => core::panic_with_felt252('err'),
    };
}

//! > ==========================================================================

//! > test with enum error

//! > cairo_code
mod Error {
    pub const Error: felt252 = 'this is an err';
}
fn main() {
    let foo: Option::<i32> = Option::None;
    let _foo = match foo {
        Option::Some(x) => x,
        Option::None => core::panic_with_felt252(Error::Error),
    };
}

//! > diagnostics
warning: Plugin diagnostic: Manual match for expect detected. Consider using `expect()` instead
 --> lib.cairo:6:16
  |
6 |       let _foo = match foo {
  |  ________________-
7 | |         Option::Some(x) => x,
8 | |         Option::None => core::panic_with_felt252(Error::Error),
9 | |     };
  | |_____-
  |

//! > fixed
mod Error {
    pub const Error: felt252 = 'this is an err';
}
fn main() {
    let foo: Option::<i32> = Option::None;
    let _foo = foo.expect(Error::Error);
}
