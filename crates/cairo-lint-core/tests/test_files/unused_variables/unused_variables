//! > one unused variable

//! > cairo_code
fn main() {
    let a: Option<felt252> = Option::Some(1);
}

//! > diagnostics
warning: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:2:9
  |
2 |     let a: Option<felt252> = Option::Some(1);
  |         -
  |

//! > fixed
fn main() {
    let a: Option<felt252> = Option::Some(1);
}

//! > ==========================================================================

//! > plenty unused variables

//! > cairo_code
fn main() {
  let used: Option<felt252> = Option::Some(1);
  let b = 1;
  {
      let c = 1_u32;
  }
  if true {
      let _avoid_collapsible = 1_u32;
      if false {
          let d = 3_u32;
      } else {
          let e = false;
      }
      let f: Array<u32> = array![];
  } else {
      let g: Option<u32> = Option::None;
      match used {
          Option::Some(not_used) => 1_u32,
          Option::None => 2_u32,
      };
  }
}

//! > diagnostics
warning: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:8:11
  |
8 |       let c = 1_u32;
  |           -
  |
warning: Unused variable. Consider ignoring by prefixing with `_`.
  --> lib.cairo:18:15
   |
18 |           let d = 3_u32;
   |               -
   |
warning: Unused variable. Consider ignoring by prefixing with `_`.
  --> lib.cairo:22:15
   |
22 |           let e = false;
   |               -
   |
warning: Unused variable. Consider ignoring by prefixing with `_`.
  --> lib.cairo:26:11
   |
26 |       let f: Array<u32> = array![];
   |           -
   |
warning: Unused variable. Consider ignoring by prefixing with `_`.
  --> lib.cairo:34:24
   |
34 |           Option::Some(not_used) => 1_u32,
   |                        --------
   |
warning: Unused variable. Consider ignoring by prefixing with `_`.
  --> lib.cairo:30:11
   |
30 |       let g: Option<u32> = Option::None;
   |           -
   |
warning: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:4:7
  |
4 |   let b = 1;
  |       -
  |

//! > fixed
fn main() {
  let used: Option<felt252> = Option::Some(1);
  let b = 1;
  {
      let c = 1_u32;
  }
  if true {
      let _avoid_collapsible = 1_u32;
      if false {
          let d = 3_u32;
      } else {
          let e = false;
      }
      let f: Array<u32> = array![];
  } else {
      let g: Option<u32> = Option::None;
      match used {
          Option::Some(not_used) => 1_u32,
          Option::None => 2_u32,
      };
  }
}

//! > ==========================================================================

//! > two unused variable

//! > cairo_code
fn main() {
    let a: Option<felt252> = Option::Some(1);
    let b = 1;
}

//! > diagnostics
warning: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:2:9
  |
2 |     let a: Option<felt252> = Option::Some(1);
  |         -
  |
warning: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:4:9
  |
4 |     let b = 1;
  |         -
  |

//! > fixed
fn main() {
    let a: Option<felt252> = Option::Some(1);
    let b = 1;
}
